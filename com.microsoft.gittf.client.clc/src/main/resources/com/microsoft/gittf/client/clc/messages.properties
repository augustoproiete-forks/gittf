#  ------------------------------------------------------------------------------------------------
#  Copyright (c) Microsoft Corporation
#  All rights reserved.
#
#  MIT License:
#
#  Permission is hereby granted, free of charge, to any person obtaining
#  a copy of this software and associated documentation files (the
#  "Software"), to deal in the Software without restriction, including
#  without limitation the rights to use, copy, modify, merge, publish,
#  distribute, sublicense, and/or sell copies of the Software, and to
#  permit persons to whom the Software is furnished to do so, subject to
#  the following conditions:
#
#  The above copyright notice and this permission notice shall be
#  included in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#  ------------------------------------------------------------------------------------------------
#
ArgumentParser.ArgumentRequiresValueFormat=argument ''{0}'' requires a value
ArgumentParser.FreeArgumentRequiresValueFormat=argument ''{0}'' requires a value
ArgumentParser.MultipleChoicesSpecifiedFormat=only one of ''{0}'' or ''{1}'' may be specified
ArgumentParser.RequiredArgumentMissingFormat={0} is a required argument
ArgumentParser.UnknownArgumentFormat=unknown argument ''{0}''
CheckinCommand.AlreadyUpToDate=All files are up to date there is nothing to check in.
CheckinCommand.Argument.AutoSquash.HelpText=automatically selects the commit paths in the git repository tree to check in
CheckinCommand.Argument.GatedBuild.HelpText=Bypass gated check-in or specify a gated build <definition> to use
CheckinCommand.Argument.Gated.ValueDescription=definition
CheckinCommand.Argument.Gated.HelpText=the gated build definition to use when checking in
CheckinCommand.Argument.Bypass.HelpText=Bypass gated check-in (requires permission)
CheckinCommand.Argument.DepthChoice.HelpText=Creates a "deep" check-in, checking in a TFS changeset for each git commit since the latest TFS changeset (requires linear history or "--squash" or "--autosquash"), or "shallow", checking in a single changeset for all commits. If omitted, the depth value provided during clone or configure is used.
CheckinCommand.Argument.Deep.HelpText=checks in all commits
CheckinCommand.Argument.NoLock.HelpText=Does not take a lock on the server path before committing (dangerous)
CheckinCommand.Argument.MetaDataChoice.HelpText=Determine whether to include git commit meta data in the changeset comment when checking in deep. If omitted, value provided during configure is used.
CheckinCommand.Argument.MetaData.HelpText=Include the git commit meta data in the changeset
CheckinCommand.Argument.NoMetaData.HelpText=Do not include the git commit meta data in the changeset
CheckinCommand.Argument.Shallow.HelpText=Checks in a single changeset representing the differences between the HEAD git commit and the latest TFS changeset
CheckinCommand.Argument.Squash.ValueDescription=commit id
CheckinCommand.Argument.Squash.HelpText=commit ID to squash when performing deep check-ins
CheckinCommand.Argument.SquashAutoSquash.HelpText=Specifies how check in should operate in the deep mode if one commit has more than one parent
CheckinCommand.Argument.Preview.HelpText=Displays a preview of the commits that will be checked in TFS
CheckinCommand.Argument.Message.ValueDescription=msg
CheckinCommand.Argument.Message.HelpText=Use the given <msg> as the changeset comment
CheckinCommand.GatedCheckinAborted=check-in aborted, pass --bypass to bypass gated check-in
CheckinCommand.CommitIdDoesNotExistFormat=
CheckinCommand.CommitIdAmbiguousFormat=commit id {0} is ambiguous
CheckinCommand.HelpDescription=Creates a check-in of the changes in the current master branch head, provided it is parented off a commit converted from a TFS changeset.
CheckinCommand.SquashOnlyAvailableWithDeep=the --squash argument is only available when using --deep
CheckinCommand.MessageWillBeIgnoreBecauseDeepSpecified=the check-in comment will be ignored because --deep is specified
PendingChangesCommand.WorkItemDoesNotExistFormat=work item {0} does not exist
PendingChangesCommand.WorkItemInvalidFormat=work item {0} is not valid
PendingChangesCommand.WorkItemSpecifiedMultipleTimesFormat=work item {0} specified more than once
CloneCommand.Argument.Bare.HelpText=Creates a "bare" git repository. The directory created will be the git repository itself, instead of creating a working directory with a .git directory underneath
CloneCommand.Argument.Deep.HelpText=Performs a "deep" clone, creating commits for each TFS changeset
CloneCommand.Argument.DepthChoice.HelpText=Creates a shallow clone of the specified depth, or a deep clone of all TFS changesets, and sets the default depth for fetch, pull, and check in operations (default: 1)
CloneCommand.Argument.Depth.HelpText=Specifies the number of changesets to create commits for (default: 1)
CloneCommand.Argument.Depth.ValueDescription=num
CloneCommand.Argument.Directory.HelpText=The name of a new directory to clone into.  If the directory is not specified, the name of the TFS folder will be used.  If this directory exists, it must be empty
CloneCommand.Argument.Version.HelpText=The TFS version to clone
CloneCommand.HelpDescription=Clones a path from Microsoft Team Foundation Server, creating a new git repository.
CloneCommnad.InvalidPathFormat={0} is not a valid path
CloneCommand.Argument.Shallow.HelpText=Creates a single commit for all changesets on the server.
CloneCommand.Argument.GitDir.ValueDescription=dir
CloneCommand.Argument.GitDir.HelpText=The repository directory to be configured. This value is required for bare repositories (default: .git)
Command.Argument.TagChoice.HelpText=Determine whether to tag all commits that map to changesets downloaded from TFS (default: true) 
Command.Argument.Tag.HelpText=Tag all commits that map to changesets
Command.Argument.NoTag.HelpText=Do not tag all commits that map to changesets
Command.Argument.MetaDataChoice.HelpText=Determine whether to include git commit meta data in changeset comments when checking in deep. (default: false)
Command.Argument.MetaData.HelpText=Include git commit meta data in changesets
Command.Argument.NoMetaData.HelpText=Do not include git commit meta data in changesets
Command.Argument.Depth.ParseErrorFormat=invalid depth: ''{0}''
Command.Argument.Help.HelpText=Displays usage information
Command.Argument.ProjectCollection.HelpText=The TFS project collection URL
Command.Argument.ServerPath.HelpText=The TFS server path to clone
Command.Argument.Quiet.HelpText=do not display progress output
Command.Argument.Display.HelpText=Determines the output detail level
Command.Argument.Verbose.HelpText=displays verbose progress output
Command.Argument.Version.ValueDescription=version
Command.ConnectionNotAvailable=could not connect to TFS server
Command.UsageFormat=usage: {0} {1} {2}
Command.HelpArguments=Arguments:
Command.PasswordPrompt=Password: 
Command.PasswordEchoCouldNotBeDisabled=Warning: local echo could not be disabled, characters will be displayed
Command.RepositoryNotFound=not a git repository (or any of the parent directories): .git
Command.ServerConfigurationNotFound=TFS server configuration could not be loaded from repository
Command.Argument.DepthChoice.HelpText=Sets the default depth value that will be used for fetch, pull, and check in operations.
Command.Argument.Deep.HelpText=Creates a commit for every changeset on fetch and checks in every commit as a separate changeset.
Command.Argument.Shallow.HelpText=Creates a single commit for all changes on fetch and checks in all commits as a single changeset. 
Command.Argument.Depth.ParseErrorFormat=Invalid depth: ''{0}''. Depth need to be a positive integer.
Command.UsernamePrompt=Username: 
Command.GitTfNotConfigured=this git repository is not configured to use git-tf
Command.MasterNotCurrentBranch=master is not the current branch. Please checkout master and try again
Command.CommandNeedsNonBare=this command cannot be executed in a bare repository
Command.OperationInProgressFormat=this git repository has a pending {0} operation. Please complete the operation and try again
Command.OperationApply=apply
Command.OperationBisecting=bisect
Command.OperationMerge=merge
Command.OperationRebase=rebase
Command.LabelAndWorkspaceVersionSpecsAreNotAllowed=label and workspace version specs are not supported
Command.ConnectingToTFS=Connecting to TFS...
Command.FailedToConnectToHostedFormat=Access denied connecting to TFS server {0}. You either provided a wrong password or basic authentication is not configured for your account
Command.InvalidServerMissingCollectionFormat=Could not find a valid TFS Collection at {0}
ConfigureCommand.HelpDescription=Binds a git repository to a TFS server.
ConfigureCommand.CollectionAndServerPathRequired=project collection URL and server path are required arguments
ConfigureCommand.Argument.List.HelpText=Displays the current configuration options
ConfigureCommand.Argument.Force.HelpText=Forces updating the server URI and server path (dangerous)
ConfigureCommand.GitRepoNotConfigured=the git repository is not yet configured to work with TFS
ConfigureCommand.InvalidCollectionFormat=project collection ''{0}'' is not a valid URL
ConfigureCommand.InvalidOptionsSpecified=nothing to configure. please specify an option to configure
ConfigureCommand.Argument.Gated.ValueDescription=definition
ConfigureCommand.Argument.Gated.HelpText=The gated build definition to use when checking in (default: None)
ConsoleOutputTaskHandler.ExceptionFormat={0}
ConsoleOutputTaskHandler.ExtendedErrorFormat={0}: {1}
ConsoleOutputTaskHandler.UnknownError=unknown error
ConsoleTaskProgressMonitor.IndeterminateTaskStartedFormat={0}: 
ConsoleTaskProgressMonitor.TaskProgressDone=done.
ConsoleTaskProgressMonitor.TaskProgressFormat={0}: {1}%
ConsoleTaskProgressMonitor.TaskProgressWithDetailFormat={0}: {1}%, {2}
ConsoleTaskProgressMonitor.TaskTruncationFormat={0}...
FetchCommand.HelpDescription=Fetch the latest code from TFS into FETCH_HEAD.
FetchCommand.Argument.Version.HelpText=The TFS version to fetch (default: latest)
FetchCommand.Argument.Deep.HelpText=Performs a "deep" fetch, creating commits for each TFS changeset since the last fetch
FetchCommand.Argument.DepthChoice.HelpText=Performs a shallow fetch of the specified depth, or a deep fetch of all TFS changesets since the last fetch. If omitted, the depth value provided during clone or configure is used.
FetchCommand.Argument.Shallow.HelpText=Creates a single commit for all changes on fetch
FetchCommand.Argument.Force.HelpText=Performs a force fetch and downloads the last downloaded changeset again. 
GitTFHTTPClientFactory.IllegalProxyURLFormat=Illegal proxy URL: ''{0}''
GitTFHTTPClientFactory.ProxyURLDoesNotContainValidHostnameFormat=Proxy URL ''{0}'' does not contain a valid hostname.
HelpCommand.Argument.Command.HelpText=The command to display help for
HelpCommand.CommandNotFoundFormat=''{0}'' is not a {1} command.  See {1} --help.
HelpCommand.HelpDescription=Displays help information for the git-tf program or the specified command.
Main.AmbiguousCommandFormat=''{0}'' is not a {1} command.  See {1} --help.\n\nDid you mean one of these?
Main.AmbiguousCommandListFormat=\        {0}
Main.ApplicationVersionFormat={0} version {1}
Main.Argument.Command.HelpText=The command to run
Main.Argument.Version.HelpTextFormat=Displays the current version of {0}
Main.Command.Help.HelpText=Displays usage information
Main.Command.Checkin.HelpText=Checks in changes to a TFS folder
Main.Command.Clone.HelpText=Initializes a git repository from a TFS path
Main.Command.Configure.HelpText=Configures an existing git repository to add to TFS
Main.Command.Fetch.HelpText=Fetch the latest code from TFS into FETCH_HEAD
Main.Command.Pull.HelpText=Pulls the latest code from TFS and merge/rebase the changes into master
Main.Command.Shelve.HelpText=Shelves the changes to a TFS folder
Main.Command.Shelvesets.HelpText=Lists the shelvesets available on the server. Provides a way to delete shelvesets
Main.Command.Unshelve.HelpText=Unshelves a shelveset from TFS into the repository
Main.CommandCreationFailedFormat=could not invoke ''{0}'' command: {1}
Main.CommandNotFoundFormat=''{0}'' is not a {1} command.  See {1} --help.
Main.HelpCommandsFormat=The {0} commands are:
Main.UsageFormat=usage: {0} {1}
Main.WarningFormat=Warning: {0}
PendingChangesCommand.Argument.Associate.HelpText=ID of the TFS work item to associate during check-in
PendingChangesCommand.Argument.Associate.ValueDescription=workitem id
PendingChangesCommand.Argument.Resolve.HelpText=ID of the TFS work item to resolve during check-in
PendingChangesCommand.Argument.Resolve.ValueDescription=workitem id
PendingChangesCommand.Argument.RenameMode.HelpText=The rename mode to use when pending changes. Specify either "all", "justFiles" or "none" (default: justFiles)
PendingChangesCommand.Argument.RenameMode.ValueDescription=all|justFiles|none
PendingChangesCommand.InvalidRenameModeFormat=''{0}'' is not a valid rename mode. Please specify either "all", "justFiles" or "none".
ProductInformation.UnableToLoadVersionPropertiesResourceFormat=Unable to load version properties resource ''{0}''
PullCommand.HelpDescription=Pulls the latest code from TFS and merge/rebase the changes into master.
PullCommand.Argument.Version.HelpText=The TFS version to pull (default: latest)
PullCommand.Argument.Deep.HelpText=Performs a "deep" fetch, creating commits for each TFS changeset since the last fetch/pull
PullCommand.Argument.DepthChoice.HelpText=Performs a shallow fetch of the specified depth, or a deep fetch of all TFS changesets since the last fetch. If omitted, the depth value provided during clone or configure is used.
PullCommand.Argument.Shallow.HelpText=Creates a single commit for all changes on pull
PullCommand.Argument.StrategyChoice.HelpText=The merge strategy that should be used when merging the changes
PullCommand.Argument.Ours.HelpText=Uses the ours strategy when merging
PullCommand.Argument.Theirs.HelpText=Uses the theirs strategy when merging
PullCommand.Argument.Resolve.HelpText=Uses the resolve strategy when merging
PullCommand.Argument.Rebase.HelpText=Rebase master on top of the upstream changes after fetching
PullCommand.RebaseNotSupportedWithOursAndTheirs=rebase does not currently support the --ours or --theirs options
PullCommand.Argument.Force.HelpText=Performs a force pull and downloads the last downloaded changeset again.
ShelveCommand.Argument.Name.HelpText=Name of the shelveset to create
ShelveCommand.Argument.Replace.HelpText=Replaces an existing shelveset of the same name
ShelveCommand.Argument.RefSpec.HelpText=The ref spec to shelve (default: HEAD of current branch)
ShelveCommand.Argument.Message.ValueDescription=msg
ShelveCommand.Argument.Message.HelpText=Use the given <msg> as the shelveset comment
ShelveCommand.HelpDescription=Creates a shelveset of the changes in the current HEAD as it differs from the last TFS changeset fetched
ShelveCommnad.InvalidRefSpecFormat=''{0}'' is not a valid ref spec to shelve.
ShelvesetsCommand.Argument.User.ValueDescription=owner
ShelvesetsCommand.Argument.User.HelpText=The shelvset owner name. User '*' to query for all users.
ShelvesetsCommand.Argument.Sort.ValueDescription=name|owner|date
ShelvesetsCommand.Argument.Sort.HelpText= The value to use when sorting the list. Please specify either "name", "owner" or "date" (default: name)
ShelvesetsCommand.Argument.Details.HelpText=Display shelveset details such as owner, date, comment and included changes (requires a shelveset name)
ShelvesetsCommand.Argument.Delete.HelpText=Deletes the shelveset specified (requires a shelveset name)
ShelvesetsCommand.Argument.Name.HelpText=Shelveset name
ShelvesetsCommand.HelpDescription=Displays the list of shelvesets available on the TFS server. Provides a way to delete shelvesets from the server too.
ShelvesetsCommand.SortWillBeIgnoredDeleteSpecified=the sort option will be ignored because --delete is specified
ShelvesetsCommand.DetailsWillBeIgnoredDeleteSpecified=the details option will be ignored because --delete is specified
ShelvesetsCommand.DeleteNotSupportedWithoutName=shelveset name is required if --delete is specified. Please specify a shelveset name and try again.
ShelvesetsCommand.InvalidShelvetSortModeFormat=''{0}'' is not a valid sort option. Please specify either  "name", "owner" or "date".
ShelvesetConsoleView.HeaderFormat={0} shelvesets found.
ShelvesetConsoleView.TableHeader=Shelveset Full Name
ShelvesetConsoleView.TableSeparator=-------------------------------------------------------------------------------
ShelvesetConsoleView.ShelvesetFormat={0};{1}
ShelvesetConsoleView.ShelvesetNameFormat=Name: {0}
ShelvesetConsoleView.ShelvesetOwnerFormat=Owner: {0} ({1})
ShelvesetConsoleView.ShelvesetCommentFormat=Comment: {0}
ShelvesetConsoleView.ShelvesetResolvedWorkItemsFormat=Resolved Workitems: {0}
ShelvesetConsoleView.ShelvesetAssociatedWorkItemsFormat=Associated Workitems: {0}
ShelvesetConsoleView.ChangesTableHeader= Change\t\tPath
ShelvesetConsoleView.PendingChangeFormat={0}\t\t{1}
ShelvesetConsoleView.ShelvesetWorkItemNone=none
UnshelveCommand.HelpDescription=Unshelves a shelveset from TFS into the repository by creating a stash for the shelveset content.
UnshelveCommand.Argument.Apply.HelpText=Applies the unshelved content stash to the repository.
UnshelveCommand.Argument.User.ValueDescription=owner
UnshelveCommand.Argument.User.HelpText=The shelvset owner name.
UnshelveCommand.Argument.Name.HelpText=Shelveset name